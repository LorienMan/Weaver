import API
import Foundation
import UIKit

/// This file is generated by Weaver 0.12.4
/// DO NOT EDIT!

@objc final class MainDependencyContainer: NSObject {

    static var onFatalError: (String, StaticString, UInt) -> Never = { message, file, line in
        Swift.fatalError(message, file: file, line: line)
    }

    private static func fatalError(file: StaticString = #file, line: UInt = #line) -> Never {
        onFatalError("Invalid memory graph. This is never suppose to happen. Please file a ticket at https://github.com/scribd/Weaver", file, line)
    }

    private typealias ParametersCopier = (MainDependencyContainer) -> Void
    private typealias Builder<T> = (ParametersCopier?) -> T

    private func builder<T>(_ value: T) -> Builder<T> {
        return { [weak self] copyParameters in
            guard let self = self else {
                MainDependencyContainer.fatalError()
            }
            copyParameters?(self)
            return value
        }
    }

    private func weakBuilder<T>(_ value: T) -> Builder<T> where T: AnyObject {
        return { [weak self, weak value] copyParameters in
            guard let self = self, let value = value else {
                MainDependencyContainer.fatalError()
            }
            copyParameters?(self)
            return value
        }
    }

    private func lazyBuilder<T>(_ builder: @escaping Builder<T>) -> Builder<T> {
        var _value: T?
        return { copyParameters in
            if let value = _value {
                return value
            }
            let value = builder(copyParameters)
            _value = value
            return value
        }
    }

    private func weakLazyBuilder<T>(_ builder: @escaping Builder<T>) -> Builder<T> where T: AnyObject {
        weak var _value: T?
        return { copyParameters in
            if let value = _value {
                return value
            }
            let value = builder(copyParameters)
            _value = value
            return value
        }
    }

    private static func fatalBuilder<T>() -> Builder<T> {
        return { _ in
            MainDependencyContainer.fatalError()
        }
    }

    private var _homeViewController: Builder<UIViewController> = MainDependencyContainer.fatalBuilder()
    var homeViewController: UIViewController {
        return _homeViewController(nil)
    }

    private var _imageManager: Builder<ImageManaging> = MainDependencyContainer.fatalBuilder()
    var imageManager: ImageManaging {
        return _imageManager(nil)
    }

    private var _logger: Builder<Logger> = MainDependencyContainer.fatalBuilder()
    var logger: Logger {
        return _logger(nil)
    }

    private var _movieAPI: Builder<APIProtocol> = MainDependencyContainer.fatalBuilder()
    var movieAPI: APIProtocol {
        return _movieAPI(nil)
    }

    private var _movieController: Builder<UIViewController> = MainDependencyContainer.fatalBuilder()
    func movieController(movieID: UInt,
                         title: String) -> UIViewController {
        return _movieController { _self in
            _self._movieID = _self.builder(movieID)
            _self._title = _self.builder(title)
        }
    }

    private var _movieID: Builder<UInt> = MainDependencyContainer.fatalBuilder()
    var movieID: UInt {
        return _movieID(nil)
    }

    private var _movieManager: Builder<MovieManaging> = MainDependencyContainer.fatalBuilder()
    var movieManager: MovieManaging {
        return _movieManager(nil)
    }

    private var _reviewController: Builder<WSReviewViewController> = MainDependencyContainer.fatalBuilder()
    var reviewController: WSReviewViewController {
        return _reviewController(nil)
    }

    private var _reviewManager: Builder<ReviewManaging> = MainDependencyContainer.fatalBuilder()
    var reviewManager: ReviewManaging {
        return _reviewManager(nil)
    }

    private var _title: Builder<String> = MainDependencyContainer.fatalBuilder()
    var title: String {
        return _title(nil)
    }

    private var _urlSession: Builder<URLSession> = MainDependencyContainer.fatalBuilder()
    var urlSession: URLSession {
        return _urlSession(nil)
    }

    fileprivate override init() {
    }

    fileprivate func appDelegateDependencyResolver() -> AppDelegateDependencyResolver {
        let _self = MainDependencyContainer()
        _self._logger = lazyBuilder { _ in return Logger() }
        _self._urlSession = lazyBuilder { [weak _self] _ in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            return { _ in URLSession.shared }(_self as URLSessionInputDependencyResolver)
        }
        _self._movieAPI = lazyBuilder { [weak _self] _ in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            return AppDelegate.makeMovieAPI(_self as MovieAPIInputDependencyResolver)
        }
        _self._imageManager = lazyBuilder { _ in return ImageManager() }
        _self._movieManager = lazyBuilder { [weak _self] _ in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            return AppDelegate.makeMovieManager(_self as MovieManagerInputDependencyResolver)
        }
        _self._homeViewController = lazyBuilder { [weak _self] _ in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.homeViewControllerDependencyResolver()
            return HomeViewController(injecting: __self)
        }
        _self._reviewManager = lazyBuilder { [weak _self] _ in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.reviewManagerDependencyResolver()
            return ReviewManager(injecting: __self)
        }
        _ = _self._logger(nil)
        _ = _self._urlSession(nil)
        _ = _self._movieAPI(nil)
        _ = _self._imageManager(nil)
        _ = _self._movieManager(nil)
        _ = _self._homeViewController(nil)
        _ = _self._reviewManager(nil)
        return _self
    }

    static func appDelegateDependencyResolver() -> AppDelegateDependencyResolver { return MainDependencyContainer().appDelegateDependencyResolver() }

    private func personManagerDependencyResolver() -> PersonManagerDependencyResolver {
        let _self = MainDependencyContainer()
        _self._logger = lazyBuilder { _ in return Logger() }
        _ = _self._logger(nil)
        return _self
    }

    private func reviewManagerDependencyResolver() -> ReviewManagerDependencyResolver {
        let _self = MainDependencyContainer()
        _self._movieAPI = _self.builder(movieAPI)
        _self._logger = lazyBuilder { _ in return Logger() }
        _ = _self._logger(nil)
        return _self
    }

    private func homeViewControllerDependencyResolver() -> HomeViewControllerDependencyResolver {
        let _self = MainDependencyContainer()
        _self._imageManager = _self.builder(imageManager)
        _self._movieManager = _self.builder(movieManager)
        _self._reviewManager = _self.builder(reviewManager)
        _self._logger = lazyBuilder { _ in return Logger() }
        _self._movieController = weakLazyBuilder { [weak _self] copyParameters in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            let __self = _self.movieViewControllerDependencyResolver()
            copyParameters?(__self as! MainDependencyContainer)
            return MovieViewController(injecting: __self)
        }
        _ = _self._logger(nil)
        return _self
    }

    private func movieViewControllerDependencyResolver() -> MovieViewControllerDependencyResolver {
        let _self = MainDependencyContainer()
        _self._imageManager = _self.builder(imageManager)
        _self._movieManager = _self.builder(movieManager)
        _self._reviewManager = _self.builder(reviewManager)
        _self._logger = lazyBuilder { _ in return Logger() }
        _self._reviewController = weakLazyBuilder { [weak _self] _ in
            guard let _self = _self else {
                MainDependencyContainer.fatalError()
            }
            return WSReviewViewController.make(_self as WSReviewViewControllerInputDependencyResolver)
        }
        _ = _self._logger(nil)
        return _self
    }
}


protocol HomeViewControllerResolver: AnyObject {
    var homeViewController: UIViewController { get }
}

protocol ImageManagerResolver: AnyObject {
    var imageManager: ImageManaging { get }
}

protocol LoggerResolver: AnyObject {
    var logger: Logger { get }
}

protocol MovieAPIResolver: AnyObject {
    var movieAPI: APIProtocol { get }
}

protocol MovieControllerResolver: AnyObject {
    func movieController(movieID: UInt, title: String) -> UIViewController
}

protocol MovieIDResolver: AnyObject {
    var movieID: UInt { get }
}

protocol MovieManagerResolver: AnyObject {
    var movieManager: MovieManaging { get }
}

protocol ReviewControllerResolver: AnyObject {
    var reviewController: WSReviewViewController { get }
}

@objc protocol ReviewManagerResolver: AnyObject {
    var reviewManager: ReviewManaging { get }
}

protocol TitleResolver: AnyObject {
    var title: String { get }
}

protocol UrlSessionResolver: AnyObject {
    var urlSession: URLSession { get }
}

extension MainDependencyContainer: HomeViewControllerResolver, ImageManagerResolver, LoggerResolver, MovieAPIResolver, MovieControllerResolver, MovieIDResolver, MovieManagerResolver, ReviewControllerResolver, ReviewManagerResolver, TitleResolver, UrlSessionResolver {
}

extension MainDependencyContainer {
}

typealias AppDelegateDependencyResolver = LoggerResolver & UrlSessionResolver & MovieAPIResolver & ImageManagerResolver & MovieManagerResolver & HomeViewControllerResolver & ReviewManagerResolver

typealias PersonManagerDependencyResolver = LoggerResolver & MovieAPIResolver

typealias ReviewManagerDependencyResolver = LoggerResolver & MovieAPIResolver

typealias HomeViewControllerDependencyResolver = LoggerResolver & MovieManagerResolver & MovieControllerResolver

typealias MovieViewControllerDependencyResolver = LoggerResolver & MovieIDResolver & TitleResolver & MovieManagerResolver & ImageManagerResolver & ReviewManagerResolver & ReviewControllerResolver

typealias MovieAPIInputDependencyResolver = HomeViewControllerResolver & ImageManagerResolver & LoggerResolver & MovieAPIResolver & MovieManagerResolver & ReviewManagerResolver & UrlSessionResolver

typealias MovieManagerInputDependencyResolver = HomeViewControllerResolver & ImageManagerResolver & LoggerResolver & MovieAPIResolver & MovieManagerResolver & ReviewManagerResolver & UrlSessionResolver

typealias URLSessionInputDependencyResolver = HomeViewControllerResolver & ImageManagerResolver & LoggerResolver & MovieAPIResolver & MovieManagerResolver & ReviewManagerResolver & UrlSessionResolver

typealias WSReviewViewControllerInputDependencyResolver = ImageManagerResolver & LoggerResolver & MovieIDResolver & MovieManagerResolver & ReviewControllerResolver & ReviewManagerResolver & TitleResolver
